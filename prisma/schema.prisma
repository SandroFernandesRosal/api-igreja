generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  login               String                @unique
  name                String
  avatarUrl           String
  password            String
  agenda              Agenda[]
  agendacaxias        AgendaCaxias[]
  agendatomazinho     AgendaTomazinho[]
  contato             Contato[]
  doacao              Doacao[]
  endereco            Endereco[]
  ministerio          Ministerio[]
  ministeriocaxias    MinisterioCaxias[]
  ministeriotomazinho MinisterioTomazinho[]
  news                New[]
  newscaxias          NewCaxias[]
  newstomazinho       NewTomazinho[]
  sobre               Sobre[]
  sobree              Sobree[]
}

model New {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  createdAt DateTime @default(now())
  isPublic  Boolean  @default(true)
  page      String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Ministerio {
  id        String   @id @default(uuid())
  userId    String
  name      String
  title     String
  local     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  coverUrl  String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Agenda {
  id        String   @id @default(uuid())
  userId    String
  day       String
  name      String
  hour      String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model NewTomazinho {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  page      String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model MinisterioTomazinho {
  id        String   @id @default(uuid())
  userId    String
  name      String
  title     String
  local     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  coverUrl  String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AgendaTomazinho {
  id        String   @id @default(uuid())
  userId    String
  day       String
  name      String
  hour      String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model NewCaxias {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  page      String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model MinisterioCaxias {
  id        String   @id @default(uuid())
  userId    String
  name      String
  title     String
  local     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  coverUrl  String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AgendaCaxias {
  id        String   @id @default(uuid())
  userId    String
  day       String
  name      String
  hour      String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Doacao {
  id        String   @id @default(uuid())
  userId    String
  local     String
  banco     String
  conta     String
  agencia   String
  nomebanco String
  pix       String
  nomepix   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Endereco {
  id        String   @id @default(uuid())
  userId    String
  local     String
  rua       String
  cep       String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Contato {
  id        String   @id @default(uuid())
  userId    String
  local     String
  whatsapp  String
  instagran String
  facebook  String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Sobre {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
}

model Sobree {
  id        String   @id @default(uuid())
  userId    String
  coverUrl  String
  content   String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
}
